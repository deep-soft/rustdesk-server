# 2023-04-10 23:30 - runs-on: ubuntu-20.04
name: srv-Win-Arm-And-Mac-cstm

# ------------- NOTE
# please setup some secrets before running this workflow:
# DOCKER_IMAGE should be the target image name on docker hub (e.g. "rustdesk/rustdesk-server-s6" )
# DOCKER_IMAGE_CLASSIC should be the target image name on docker hub for the old build (e.g. "rustdesk/rustdesk-server" )
# DOCKER_USERNAME is the username you normally use to login at https://hub.docker.com/
# DOCKER_PASSWORD is a token you should create under "account settings / security" with read/write access

on:
  workflow_dispatch:
#  push:
#    tags:
#      - 'v[0-9]+.[0-9]+.[0-9]+'
#      - '[0-9]+.[0-9]+.[0-9]+'
#      - 'v[0-9]+.[0-9]+.[0-9]+-[0-9]+'
#      - '[0-9]+.[0-9]+.[0-9]+-[0-9]+'

env:
  # date: 2023.02.24 20:00
  CARGO_TERM_COLOR: always
  TAG_NAME: "rdsksrvr"
  LATEST_TAG: latest
  VERSION: "1.2.0"
  # To make a custom build with your own servers set the below secret values
  RS_PUB_KEY: '${{ secrets.RS_PUB_KEY }}'
  RENDEZVOUS_SERVER: '${{ secrets.RENDEZVOUS_SERVER }}'
  RDSK_PCH_SH_PRE: '${{ secrets.RDSK_PCH_SH_PRE }}'
  RDSK_PCH_SH: '${{ secrets.RDSK_PCH_SH }}'
  RDSK_PCH_HL: '${{ secrets.RDSK_PCH_HL }}'
  RDSK_PCH_SH2: '${{ secrets.RDSK_PCH_SH2 }}'
  RDSK_PCH_SH_CLN: '${{ secrets.RDSK_PCH_SH_CLN }}'

jobs:
  # binary build
  build:

    name: Build - ${{ matrix.job.name }}
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        job:
          - { name: "amd64",   target: "x86_64-unknown-linux-musl"      }
          - { name: "arm64v8", target: "aarch64-unknown-linux-musl"     }
          - { name: "armv7",   target: "armv7-unknown-linux-musleabihf" }
          - { name: "i386",    target: "i686-unknown-linux-musl"        }
          - { name: "amd64fb", target: "x86_64-unknown-freebsd"         }

    steps:
      - name: Checkout
        uses: deep-soft/checkout@v3

      - name: Create source archive  
        continue-on-error: true
        shell: bash
        run: |
          staging="rdsk-srv-src-${{ env.VERSION }}-${{ matrix.job.name }}"
          if [ "${{ matrix.os }}" = "windows-2022" ]; then
            7z a "$staging.zip" "*"
            echo "ASSET_SRC=$staging.zip" >> $GITHUB_ENV
            echo "source archive name:"
            ls -l "$staging.zip"
          else
            touch "$staging.tar.xz"
            #tar -cfJ "$staging.tar.xz" --exclude "$staging.tar.xz" .
            tar --exclude=*.tar* -cv . | xz -9 > "$staging.tar.xz"
            echo "ASSET_SRC=$staging.tar.xz" >> $GITHUB_ENV
            echo "source archive name: "
            ls -l "$staging.tar.xz"
          fi
          #ls -l ${{ env.ASSET_SRC }} 

      - name: Prepare for patch 1
        continue-on-error: true
        shell: bash
        run: |
          echo "$RDSK_PCH_SH_PRE" | base64 --decode > ./RDSK_PCH_SH_PRE.sh
          echo "$RDSK_PCH_SH" | base64 --decode > ./RDSK_PCH_SH.sh
          echo "$RDSK_PCH_HL" | base64 --decode > ./RDSK_PTCH_HL.txt
          echo prepatch 1 run
          bash ./RDSK_PCH_SH_PRE.sh
          echo Done prepatch 1
          if [ "${{ env.DEBUG_LS }}" = "yes" ]; then
            ls -l
            pwd
          fi

      - name: Apply patch 1
        # continue-on-error: true
        shell: bash
        env: 
          SED_EXE: ${{ env.SED_EXE }}
        run: |
          echo patch 1 run_1
          bash ./RDSK_PCH_SH.sh
          echo patch 1 run_2
          bash ./RDSK_PCH_SH.sh
          echo patch 1 run_3
          bash ./RDSK_PCH_SH.sh
          echo Done patch 1
          #cat ./libs/hbb_common/src/config.rs

      - name: Cleanup after patch
        continue-on-error: true
        shell: bash
        run: |
          echo "$RDSK_PCH_SH_CLN" | base64 --decode > ./RDSK_PCH_SH_CLN.sh
          bash ./RDSK_PCH_SH_CLN.sh

      - name: Create source archive 1
        continue-on-error: true
        shell: bash
        run: |
          staging="rdsk-srv-src1-${{ env.VERSION }}-${{ matrix.job.name }}"
          if [ "${{ matrix.os }}" = "windows-2022" ]; then
            7z a "$staging.zip" "*" > nul
            echo "ASSET_SRC1=$staging.zip" >> $GITHUB_ENV
            echo "source archive name:"
            ls -l "$staging.zip"
          else
            touch "$staging.tar.xz"
            #tar -cfJ "$staging.tar.xz" --exclude "$staging.tar.xz" .
            tar --exclude=*.tar* -cv . | xz -9 > "$staging.tar.xz"
            echo "ASSET_SRC1=$staging.tar.xz" >> $GITHUB_ENV
            echo "source archive name: "
            ls -l "$staging.tar.xz"
          fi
          ls -l ${{ env.ASSET_SRC1 }} 

      - name: Publish src archives
        continue-on-error: true
        uses: deep-soft/action-gh-release@v1
        with:
          draft: true
          tag_name: ${{ env.TAG_NAME }}
          files: |
            ${{ env.ASSET_SRC }}
            ${{ env.ASSET_SRC1 }}

      - name: Install toolchain
        uses: deep-soft/rust-toolchain@master
        with:
          toolchain: "1.70.0"
          override: true
          default: true
          components: rustfmt
          profile: minimal
          target: ${{ matrix.job.target }}

      - name: Build
        #uses: actions-rs/cargo@v1
        uses: deep-soft/rust-cargo@master
        with:
          command: build
          args: --release --all-features --target=${{ matrix.job.target }}
          use-cross: true  

      - name: Exec chmod
        run: chmod -v a+x target/${{ matrix.job.target }}/release/*

      - name: Publish Artifacts
        uses: deep-soft/upload-artifact@v3
        with:
          name: binaries-linux-${{ matrix.job.name }}
          path: |
            target/${{ matrix.job.target }}/release/hbbr
            target/${{ matrix.job.target }}/release/hbbs
            target/${{ matrix.job.target }}/release/rustdesk-utils
          if-no-files-found: error

      - name: Create Release
        uses: deep-soft/action-gh-release@v1
        with:
          draft: true
          tag_name: ${{ env.TAG_NAME }}
          files: |
            ${{ env.ASSET_SRC }}
            ${{ env.ASSET_SRC1 }}


  build-win:
    name: Build - windows
    runs-on: windows-2019

    steps:
      - name: Checkout
        uses: deep-soft/checkout@v3

      - name: Create source archive  
        continue-on-error: true
        shell: bash
        run: |
          staging="rdsk-srv-src-${{ env.VERSION }}-win"
          7z a "$staging.zip" "*"
          echo "ASSET_SRC=$staging.zip" >> $GITHUB_ENV
          echo "source archive name:"
          ls -l "$staging.zip"
          #ls -l ${{ env.ASSET_SRC }} 

      - name: Prepare for patch 1
        continue-on-error: true
        shell: bash
        run: |
          echo "$RDSK_PCH_SH_PRE" | base64 --decode > ./RDSK_PCH_SH_PRE.sh
          echo "$RDSK_PCH_SH" | base64 --decode > ./RDSK_PCH_SH.sh
          echo "$RDSK_PCH_HL" | base64 --decode > ./RDSK_PTCH_HL.txt
          echo prepatch 1 run
          bash ./RDSK_PCH_SH_PRE.sh
          echo Done prepatch 1
          if [ "${{ env.DEBUG_LS }}" = "yes" ]; then
            ls -l
            pwd
          fi

      - name: Apply patch 1
        # continue-on-error: true
        shell: bash
        env: 
          SED_EXE: ${{ env.SED_EXE }}
        run: |
          echo patch 1 run_1
          bash ./RDSK_PCH_SH.sh
          echo patch 1 run_2
          bash ./RDSK_PCH_SH.sh
          echo patch 1 run_3
          bash ./RDSK_PCH_SH.sh
          echo Done patch 1
          #cat ./libs/hbb_common/src/config.rs

      - name: Cleanup after patch
        continue-on-error: true
        shell: bash
        run: |
          echo "$RDSK_PCH_SH_CLN" | base64 --decode > ./RDSK_PCH_SH_CLN.sh
          bash ./RDSK_PCH_SH_CLN.sh

      - name: Create source archive 1
        continue-on-error: true
        shell: bash
        run: |
          staging="rdsk-srv-src1-${{ env.VERSION }}-win"
          if [ "${{ matrix.os }}" = "windows-2022" ]; then
            7z a "$staging.zip" "*" > nul
            echo "ASSET_SRC1=$staging.zip" >> $GITHUB_ENV
            echo "source archive name:"
            ls -l "$staging.zip"
          else
            touch "$staging.tar.xz"
            #tar -cfJ "$staging.tar.xz" --exclude "$staging.tar.xz" .
            tar --exclude=*.tar* -cv . | xz -9 > "$staging.tar.xz"
            echo "ASSET_SRC1=$staging.tar.xz" >> $GITHUB_ENV
            echo "source archive name: "
            ls -l "$staging.tar.xz"
          fi
          ls -l ${{ env.ASSET_SRC1 }} 

      - name: Publish src archives
        continue-on-error: true
        uses: deep-soft/action-gh-release@v1
        with:
          draft: true
          tag_name: ${{ env.TAG_NAME }}
          files: |
            ${{ env.ASSET_SRC }}
            ${{ env.ASSET_SRC1 }}

      - name: Install toolchain
        uses: deep-soft/rust-toolchain@master
        with:
          toolchain: "1.70.0"
          override: true
          default: true
          components: rustfmt
          profile: minimal
          target: x86_64-pc-windows-msvc

      - name: Build
        uses: deep-soft/rust-cargo@master
        with:
          command: build
          args: --release --all-features --target=x86_64-pc-windows-msvc
          use-cross: true

      - name: Install NSIS
        run: |
          iwr -useb get.scoop.sh -outfile 'install.ps1'
          .\install.ps1 -RunAsAdmin
          scoop update
          scoop bucket add extras
          scoop install nsis

      - name: Install Node.js
        uses: deep-soft/setup-node@v3
        with:
          node-version: 16

      - name: Sign exe files
        uses: deep-soft/code-sign-action@master
        with:
          certificate: '${{ secrets.WINDOWS_PFX_BASE64 }}'
          password: '${{ secrets.WINDOWS_PFX_PASSWORD }}'
          certificatesha1: '${{ secrets.WINDOWS_PFX_SHA1_THUMBPRINT }}'
          folder: 'target\x86_64-pc-windows-msvc\release'
          recursive: false

      - name: Build UI browser file
        run: |
          npm i
          npm run build
        working-directory: ./ui/html

      - name: Build UI setup file
        run: |
          rustup default nightly
          cargo build --release
          xcopy /y ..\target\x86_64-pc-windows-msvc\release\*.exe setup\bin\
          xcopy /y target\release\*.exe setup\
          mkdir setup\logs
          makensis /V1 setup.nsi
          mkdir SignOutput
          mv RustDeskServer.Setup.exe SignOutput\
          mv ..\target\x86_64-pc-windows-msvc\release\*.exe SignOutput\
        working-directory: ./ui

      - name: Sign UI setup file 
        uses: deep-soft/code-sign-action@master
        with:
          certificate: '${{ secrets.WINDOWS_PFX_BASE64 }}'
          password: '${{ secrets.WINDOWS_PFX_PASSWORD }}'
          certificatesha1: '${{ secrets.WINDOWS_PFX_SHA1_THUMBPRINT }}'
          folder: './ui/SignOutput'
          recursive: false

      - name: Publish Artifacts
        uses: deep-soft/upload-artifact@v3
        with:
          name: binaries-windows-x86_64
          path: |
            ui\SignOutput\hbbr.exe
            ui\SignOutput\hbbs.exe
            ui\SignOutput\rustdesk-utils.exe
            ui\SignOutput\RustDeskServer.Setup.exe
          if-no-files-found: error

      - name: Create Release
        uses: deep-soft/action-gh-release@v1
        with:
          draft: true
          tag_name: ${{ env.TAG_NAME }}
          files: |
            ${{ env.ASSET_SRC }}
            ${{ env.ASSET_SRC1 }}

  # github (draft) release with all binaries
  release:

    name: Github release
    needs: 
      - build
      - build-win
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        job:
          - { os: "linux",   name: "amd64" }
          - { os: "linux",   name: "arm64v8" }
          - { os: "linux",   name: "armv7" }
          - { os: "linux",   name: "i386" }
          - { os: "linux",   name: "amd64fb" }
          - { os: "windows", name: "x86_64" }
          
    steps:

      - name: Download binaries (${{ matrix.job.os }} - ${{ matrix.job.name }})
        uses: deep-soft/download-artifact@main
        with:
          name: binaries-${{ matrix.job.os }}-${{ matrix.job.name }}
          path: ${{ matrix.job.name }}

      - name: Exec chmod
        run: chmod -v a+x ${{ matrix.job.name }}/*

      - name: Pack files (${{ matrix.job.os }} - ${{ matrix.job.name }})
        run: |
          sudo apt update
          DEBIAN_FRONTEND=noninteractive sudo apt install -y zip
          zip ${{ matrix.job.name }}/rustdesk-server-${{ matrix.job.os }}-${{ matrix.job.name }}.zip ${{ matrix.job.name }}/*

      - name: Create Release (${{ matrix.job.os }} - (${{ matrix.job.name }})
        uses: deep-soft/action-gh-release@v1
        with:
          draft: true
          tag_name: ${{ env.TAG_NAME }}
          files: |
            ${{ matrix.job.name }}/rustdesk-server-${{ matrix.job.os }}-${{ matrix.job.name }}.zip
            ${{ env.ASSET_SRC }}
            ${{ env.ASSET_SRC1 }}

  # docker build and push of single-arch images
  docker:

    name: Docker push - ${{ matrix.job.name }}
    needs: build
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        job:
          - { name: "amd64",   docker_platform: "linux/amd64",  s6_platform: "x86_64" }
          - { name: "arm64v8", docker_platform: "linux/arm64",  s6_platform: "aarch64" }
          - { name: "armv7",   docker_platform: "linux/arm/v7", s6_platform: "armhf" }
          - { name: "i386",    docker_platform: "linux/386",    s6_platform: "i686" }

    steps:

      - name: Checkout
        uses: deep-soft/checkout@v3

      - name: Create source archive  
        continue-on-error: true
        shell: bash
        run: |
          staging="rdsk-srv-src-${{ env.VERSION }}-${{ matrix.job.name }}"
          if [ "${{ matrix.os }}" = "windows-2022" ]; then
            7z a "$staging.zip" "*"
            echo "ASSET_SRC=$staging.zip" >> $GITHUB_ENV
            echo "source archive name:"
            ls -l "$staging.zip"
          else
            touch "$staging.tar.xz"
            #tar -cfJ "$staging.tar.xz" --exclude "$staging.tar.xz" .
            tar --exclude=*.tar* -cv . | xz -9 > "$staging.tar.xz"
            echo "ASSET_SRC=$staging.tar.xz" >> $GITHUB_ENV
            echo "source archive name: "
            ls -l "$staging.tar.xz"
          fi
          #ls -l ${{ env.ASSET_SRC }} 

      - name: Prepare for patch 1
        continue-on-error: true
        shell: bash
        run: |
          echo "$RDSK_PCH_SH_PRE" | base64 --decode > ./RDSK_PCH_SH_PRE.sh
          echo "$RDSK_PCH_SH" | base64 --decode > ./RDSK_PCH_SH.sh
          echo "$RDSK_PCH_HL" | base64 --decode > ./RDSK_PTCH_HL.txt
          echo prepatch 1 run
          bash ./RDSK_PCH_SH_PRE.sh
          echo Done prepatch 1
          if [ "${{ env.DEBUG_LS }}" = "yes" ]; then
            ls -l
            pwd
          fi

      - name: Apply patch 1
        # continue-on-error: true
        shell: bash
        env: 
          SED_EXE: ${{ env.SED_EXE }}
        run: |
          echo patch 1 run_1
          bash ./RDSK_PCH_SH.sh
          echo patch 1 run_2
          bash ./RDSK_PCH_SH.sh
          echo patch 1 run_3
          bash ./RDSK_PCH_SH.sh
          echo Done patch 1
          #cat ./libs/hbb_common/src/config.rs

      - name: Cleanup after patch
        continue-on-error: true
        shell: bash
        run: |
          echo "$RDSK_PCH_SH_CLN" | base64 --decode > ./RDSK_PCH_SH_CLN.sh
          bash ./RDSK_PCH_SH_CLN.sh

      - name: Create source archive 1
        continue-on-error: true
        shell: bash
        run: |
          staging="rdsk-srv-src1-${{ env.VERSION }}-${{ matrix.job.name }}"
          if [ "${{ matrix.os }}" = "windows-2022" ]; then
            7z a "$staging.zip" "*" > nul
            echo "ASSET_SRC1=$staging.zip" >> $GITHUB_ENV
            echo "source archive name:"
            ls -l "$staging.zip"
          else
            touch "$staging.tar.xz"
            #tar -cfJ "$staging.tar.xz" --exclude "$staging.tar.xz" .
            tar --exclude=*.tar* -cv . | xz -9 > "$staging.tar.xz"
            echo "ASSET_SRC1=$staging.tar.xz" >> $GITHUB_ENV
            echo "source archive name: "
            ls -l "$staging.tar.xz"
          fi
          ls -l ${{ env.ASSET_SRC1 }} 

      - name: Download binaries
        uses: deep-soft/download-artifact@main
        with:
          name: binaries-linux-${{ matrix.job.name }}
          path: docker/rootfs/usr/bin

      - name: Make binaries executable
        run: chmod -v a+x docker/rootfs/usr/bin/*

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
        
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: registry.hub.docker.com/${{ secrets.DOCKER_IMAGE }}

      - name: Get git tag
        id: vars
        run: |
          T=${GITHUB_REF#refs/*/}
          M=${T%%.*}
          echo "GIT_TAG=$T" >> $GITHUB_ENV
          echo "MAJOR_TAG=$M" >> $GITHUB_ENV

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: "./docker"
          platforms: ${{ matrix.job.docker_platform }}
          push: true
          build-args: |
            S6_ARCH=${{ matrix.job.s6_platform }}
          tags: |
            ${{ secrets.DOCKER_IMAGE }}:${{ env.LATEST_TAG }}-${{ matrix.job.name }}
            ${{ secrets.DOCKER_IMAGE }}:${{ env.GIT_TAG }}-${{ matrix.job.name }}
            ${{ secrets.DOCKER_IMAGE }}:${{ env.MAJOR_TAG }}-${{ matrix.job.name }}
          labels: ${{ steps.meta.outputs.labels }}

  # docker build and push of multiarch images
  docker-manifest:

    name: Docker manifest
    needs: docker
    runs-on: ubuntu-20.04

    steps:

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Get git tag
        id: vars
        run: |
          T=${GITHUB_REF#refs/*/}
          M=${T%%.*}
          echo "GIT_TAG=$T" >> $GITHUB_ENV
          echo "MAJOR_TAG=$M" >> $GITHUB_ENV

      # manifest for :1.2.3 tag
      #  this has to run only if invoked by a new tag
      - name: Create and push manifest (:ve.rs.ion)
        uses: Noelware/docker-manifest-action@master
        if: github.event_name != 'workflow_dispatch'
        with:
          base-image: ${{ secrets.DOCKER_IMAGE }}:${{ env.GIT_TAG }}
          extra-images: ${{ secrets.DOCKER_IMAGE }}:${{ env.GIT_TAG }}-amd64,${{ secrets.DOCKER_IMAGE }}:${{ env.GIT_TAG }}-arm64v8,${{ secrets.DOCKER_IMAGE }}:${{ env.GIT_TAG }}-armv7,${{ secrets.DOCKER_IMAGE }}:${{ env.GIT_TAG }}-i386
          push: true

      # manifest for :1 tag (major release)
      - name: Create and push manifest (:major)
        uses: Noelware/docker-manifest-action@master
        with:
          base-image: ${{ secrets.DOCKER_IMAGE }}:${{ env.MAJOR_TAG }}
          extra-images: ${{ secrets.DOCKER_IMAGE }}:${{ env.MAJOR_TAG }}-amd64,${{ secrets.DOCKER_IMAGE }}:${{ env.MAJOR_TAG }}-arm64v8,${{ secrets.DOCKER_IMAGE }}:${{ env.MAJOR_TAG }}-armv7,${{ secrets.DOCKER_IMAGE }}:${{ env.MAJOR_TAG }}-i386
          push: true

      # manifest for :latest tag
      - name: Create and push manifest (:latest)
        uses: Noelware/docker-manifest-action@master
        with:
          base-image: ${{ secrets.DOCKER_IMAGE }}:${{ env.LATEST_TAG }}
          extra-images: ${{ secrets.DOCKER_IMAGE }}:${{ env.LATEST_TAG }}-amd64,${{ secrets.DOCKER_IMAGE }}:${{ env.LATEST_TAG }}-arm64v8,${{ secrets.DOCKER_IMAGE }}:${{ env.LATEST_TAG }}-armv7,${{ secrets.DOCKER_IMAGE }}:${{ env.LATEST_TAG }}-i386
          push: true

  # docker build and push of classic images
  docker-classic:

    name: Docker push classic - ${{ matrix.job.name }}
    needs: build
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        job:
          - { name: "amd64",   docker_platform: "linux/amd64", tag: "latest" }
          - { name: "arm64v8", docker_platform: "linux/arm64", tag: "latest-arm64v8" }

    steps:

      - name: Checkout
        uses: deep-soft/checkout@v3

      - name: Create source archive  
        continue-on-error: true
        shell: bash
        run: |
          staging="rdsk-srv-src-${{ env.VERSION }}-${{ matrix.job.name }}"
          if [ "${{ matrix.os }}" = "windows-2022" ]; then
            7z a "$staging.zip" "*"
            echo "ASSET_SRC=$staging.zip" >> $GITHUB_ENV
            echo "source archive name:"
            ls -l "$staging.zip"
          else
            touch "$staging.tar.xz"
            #tar -cfJ "$staging.tar.xz" --exclude "$staging.tar.xz" .
            tar --exclude=*.tar* -cv . | xz -9 > "$staging.tar.xz"
            echo "ASSET_SRC=$staging.tar.xz" >> $GITHUB_ENV
            echo "source archive name: "
            ls -l "$staging.tar.xz"
          fi
          #ls -l ${{ env.ASSET_SRC }} 

      - name: Prepare for patch 1
        continue-on-error: true
        shell: bash
        run: |
          echo "$RDSK_PCH_SH_PRE" | base64 --decode > ./RDSK_PCH_SH_PRE.sh
          echo "$RDSK_PCH_SH" | base64 --decode > ./RDSK_PCH_SH.sh
          echo "$RDSK_PCH_HL" | base64 --decode > ./RDSK_PTCH_HL.txt
          echo prepatch 1 run
          bash ./RDSK_PCH_SH_PRE.sh
          echo Done prepatch 1
          if [ "${{ env.DEBUG_LS }}" = "yes" ]; then
            ls -l
            pwd
          fi

      - name: Apply patch 1
        # continue-on-error: true
        shell: bash
        env: 
          SED_EXE: ${{ env.SED_EXE }}
        run: |
          echo patch 1 run_1
          bash ./RDSK_PCH_SH.sh
          echo patch 1 run_2
          bash ./RDSK_PCH_SH.sh
          echo patch 1 run_3
          bash ./RDSK_PCH_SH.sh
          echo Done patch 1
          #cat ./libs/hbb_common/src/config.rs

      - name: Cleanup after patch
        continue-on-error: true
        shell: bash
        run: |
          echo "$RDSK_PCH_SH_CLN" | base64 --decode > ./RDSK_PCH_SH_CLN.sh
          bash ./RDSK_PCH_SH_CLN.sh

      - name: Create source archive 1
        continue-on-error: true
        shell: bash
        run: |
          staging="rdsk-srv-src1-${{ env.VERSION }}-${{ matrix.job.name }}"
          if [ "${{ matrix.os }}" = "windows-2022" ]; then
            7z a "$staging.zip" "*" > nul
            echo "ASSET_SRC1=$staging.zip" >> $GITHUB_ENV
            echo "source archive name:"
            ls -l "$staging.zip"
          else
            touch "$staging.tar.xz"
            #tar -cfJ "$staging.tar.xz" --exclude "$staging.tar.xz" .
            tar --exclude=*.tar* -cv . | xz -9 > "$staging.tar.xz"
            echo "ASSET_SRC1=$staging.tar.xz" >> $GITHUB_ENV
            echo "source archive name: "
            ls -l "$staging.tar.xz"
          fi
          ls -l ${{ env.ASSET_SRC1 }} 

      - name: Download binaries
        uses: deep-soft/download-artifact@main
        with:
          name: binaries-linux-${{ matrix.job.name }}
          path: docker-classic/

      - name: Make binaries executable
        run: chmod -v a+x docker-classic/hbb*

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
        
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: registry.hub.docker.com/${{ secrets.DOCKER_IMAGE_CLASSIC }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: "./docker-classic"
          platforms: ${{ matrix.job.docker_platform }}
          push: true
          tags: |
            ${{ secrets.DOCKER_IMAGE_CLASSIC }}:${{ matrix.job.tag }}
          labels: ${{ steps.meta.outputs.labels }}

  deb-package:

    name: debian package - ${{ matrix.job.name }}
    needs: build
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        job:
          - { name: "amd64",   debian_platform: "amd64",   crossbuild_package: "" }
          - { name: "arm64v8", debian_platform: "arm64",   crossbuild_package: "crossbuild-essential-arm64" }
          - { name: "armv7",   debian_platform: "armhf",   crossbuild_package: "crossbuild-essential-armhf" }
          - { name: "i386",    debian_platform: "i386",    crossbuild_package: "crossbuild-essential-i386" }

    steps:

      - name: Checkout
        uses: deep-soft/checkout@v3

      - name: Create source archive  
        continue-on-error: true
        shell: bash
        run: |
          staging="rdsk-srv-src-${{ env.VERSION }}-${{ matrix.job.name }}"
          if [ "${{ matrix.os }}" = "windows-2022" ]; then
            7z a "$staging.zip" "*"
            echo "ASSET_SRC=$staging.zip" >> $GITHUB_ENV
            echo "source archive name:"
            ls -l "$staging.zip"
          else
            touch "$staging.tar.xz"
            #tar -cfJ "$staging.tar.xz" --exclude "$staging.tar.xz" .
            tar --exclude=*.tar* -cv . | xz -9 > "$staging.tar.xz"
            echo "ASSET_SRC=$staging.tar.xz" >> $GITHUB_ENV
            echo "source archive name: "
            ls -l "$staging.tar.xz"
          fi
          #ls -l ${{ env.ASSET_SRC }} 

      - name: Prepare for patch 1
        continue-on-error: true
        shell: bash
        run: |
          echo "$RDSK_PCH_SH_PRE" | base64 --decode > ./RDSK_PCH_SH_PRE.sh
          echo "$RDSK_PCH_SH" | base64 --decode > ./RDSK_PCH_SH.sh
          echo "$RDSK_PCH_HL" | base64 --decode > ./RDSK_PTCH_HL.txt
          echo prepatch 1 run
          bash ./RDSK_PCH_SH_PRE.sh
          echo Done prepatch 1
          if [ "${{ env.DEBUG_LS }}" = "yes" ]; then
            ls -l
            pwd
          fi

      - name: Apply patch 1
        # continue-on-error: true
        shell: bash
        env: 
          SED_EXE: ${{ env.SED_EXE }}
        run: |
          echo patch 1 run_1
          bash ./RDSK_PCH_SH.sh
          echo patch 1 run_2
          bash ./RDSK_PCH_SH.sh
          echo patch 1 run_3
          bash ./RDSK_PCH_SH.sh
          echo Done patch 1
          #cat ./libs/hbb_common/src/config.rs

      - name: Cleanup after patch
        continue-on-error: true
        shell: bash
        run: |
          echo "$RDSK_PCH_SH_CLN" | base64 --decode > ./RDSK_PCH_SH_CLN.sh
          bash ./RDSK_PCH_SH_CLN.sh

      - name: Create source archive 1
        continue-on-error: true
        shell: bash
        run: |
          staging="rdsk-srv-src1-${{ env.VERSION }}-${{ matrix.job.name }}"
          if [ "${{ matrix.os }}" = "windows-2022" ]; then
            7z a "$staging.zip" "*" > nul
            echo "ASSET_SRC1=$staging.zip" >> $GITHUB_ENV
            echo "source archive name:"
            ls -l "$staging.zip"
          else
            touch "$staging.tar.xz"
            #tar -cfJ "$staging.tar.xz" --exclude "$staging.tar.xz" .
            tar --exclude=*.tar* -cv . | xz -9 > "$staging.tar.xz"
            echo "ASSET_SRC1=$staging.tar.xz" >> $GITHUB_ENV
            echo "source archive name: "
            ls -l "$staging.tar.xz"
          fi
          ls -l ${{ env.ASSET_SRC1 }} 

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Create packaging env
        run: |
          sudo apt update
          DEBIAN_FRONTEND=noninteractive sudo apt install -y devscripts build-essential debhelper pkg-config ${{ matrix.job.crossbuild_package }}
          mkdir -p debian-build/${{ matrix.job.name }}/bin

      - name: Download binaries
        uses: deep-soft/download-artifact@main
        with:
          name: binaries-linux-${{ matrix.job.name }}
          path: debian-build/${{ matrix.job.name }}/bin

      - name: Build package for ${{ matrix.job.name }} arch
        run: |
          chmod -v a+x debian-build/${{ matrix.job.name }}/bin/*
          cp -vr debian systemd debian-build/${{ matrix.job.name }}/
          cat debian/control.tpl | sed 's/{{ ARCH }}/${{ matrix.job.debian_platform }}/' > debian-build/${{ matrix.job.name }}/debian/control
          cd debian-build/${{ matrix.job.name }}/
          debuild -i -us -uc -b -a${{ matrix.job.debian_platform }}

      - name: Create Release
        uses: deep-soft/action-gh-release@v1
        with:
          draft: true
          tag_name: ${{ env.TAG_NAME }}
          files: |
            ${{ env.ASSET_SRC }}
            ${{ env.ASSET_SRC1 }}
            debian-build/rustdesk-server-hbbr_*_${{ matrix.job.debian_platform }}.deb
            debian-build/rustdesk-server-hbbs_*_${{ matrix.job.debian_platform }}.deb
            debian-build/rustdesk-server-utils_*_${{ matrix.job.debian_platform }}.deb
