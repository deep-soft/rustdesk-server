name: prerelease-win

# ------------- NOTE
# please setup some secrets before running this workflow:
# DOCKER_IMAGE should be the target image name on docker hub (e.g. "rustdesk/rustdesk-server-s6" )
# DOCKER_IMAGE_CLASSIC should be the target image name on docker hub for the old build (e.g. "rustdesk/rustdesk-server" )
# DOCKER_USERNAME is the username you normally use to login at https://hub.docker.com/
# DOCKER_PASSWORD is a token you should create under "account settings / security" with read/write access

on:
  workflow_dispatch:
#  push:
#    tags:
#      - 'v[0-9]+.[0-9]+.[0-9]+'
#      - '[0-9]+.[0-9]+.[0-9]+'
#      - 'v[0-9]+.[0-9]+.[0-9]+-[0-9]+'
#      - '[0-9]+.[0-9]+.[0-9]+-[0-9]+'

env:
  CARGO_TERM_COLOR: always
  TAG_NAME: "server"
  LATEST_TAG: latest
  
jobs:
  # binary build
  build-win:
    name: Build - windows
#    runs-on: windows-2019 
    runs-on: windows-2022
    steps:
      
      - name: Checkout
        uses: deep-soft/checkout@v3

      - name: Install toolchain
        uses: deep-soft/rust-toolchain@master
        with:
          toolchain: "1.62"
          override: true
          default: true
          components: rustfmt
          profile: minimal
          target: x86_64-pc-windows-msvc

      - name: Build
        uses: deep-soft/rust-cargo@master
        with:
          command: build
          args: --release --all-features --target=x86_64-pc-windows-msvc
          use-cross: true

      - name: Install NSIS
        run: |
          iwr -useb get.scoop.sh -outfile 'install.ps1'
          .\install.ps1 -RunAsAdmin
          scoop update
          scoop bucket add extras
          scoop install nsis

      - run: rustup default nightly
      - run: cargo build --release
        working-directory: ./ui
      - run: xcopy /y target\x86_64-pc-windows-msvc\release\*.exe ui\setup\bin\
      - run: xcopy /y ui\target\release\*.exe ui\setup\
      - run: mkdir ui\setup\logs
      - run: makensis /V1 setup.nsi
        working-directory: ./ui

      - name: Publish Artifacts
        uses: deep-soft/upload-artifact@v3
        with:
          name: binaries-windows-x86_64
          path: |
            target\x86_64-pc-windows-msvc\release\hbbr.exe
            target\x86_64-pc-windows-msvc\release\hbbs.exe
            target\x86_64-pc-windows-msvc\release\rustdesk-utils.exe
            ui\RustDeskServer.Setup.exe
          if-no-files-found: error

  # github (draft) release with all binaries
  release:

    name: Github release
    needs: 
      - build-win
    runs-on: ubuntu-18.04
    strategy:
      fail-fast: false
      matrix:
        job:
          - { os: "windows", name: "x86_64" }

    steps:
      - name: Download binaries (${{ matrix.job.os }} - ${{ matrix.job.name }})
        uses: deep-soft/download-artifact@main
        with:
          name: binaries-${{ matrix.job.os }}-${{ matrix.job.name }}
          path: ${{ matrix.job.name }}

      - name: Exec chmod
        run: |
          chmod -v a+x ${{ matrix.job.name }}/*
          ls -lR ${{ matrix.job.name }}/*

      - name: Pack files (${{ matrix.job.os }} - ${{ matrix.job.name }})
        run: |
          sudo apt update
          DEBIAN_FRONTEND=noninteractive sudo apt install -y zip
          zip -r ${{ matrix.job.name }}/rustdesk-server-${{ matrix.job.os }}-${{ matrix.job.name }}.zip ${{ matrix.job.name }}/*

      - name: Create Release (${{ matrix.job.os }} - (${{ matrix.job.name }})
        uses: deep-soft/action-gh-release@v1
        with:
          draft: true
          tag_name: ${{ env.TAG_NAME }}
          files: ${{ matrix.job.name }}/rustdesk-server-${{ matrix.job.os }}-${{ matrix.job.name }}.zip
